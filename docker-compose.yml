version: '3.8' # Specify the version of Docker Compose

services: 

  back-end:
    build: 
      context: ./node  # Pointing to the node directory
    container_name: back-end
    working_dir: /usr/src/app
    networks: 
      - node-network
    volumes: 
      - ./node:/usr/src/app
      - /usr/src/app/node_modules
    tty: true
    ports: 
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}
    command: npm run start
    depends_on:
      - db

  front-end:
    build: 
      context: ./react  # Pointing to the react directory
    container_name: front-end
    working_dir: /usr/src/app
    networks: 
      - node-network
    volumes: 
      - ./react:/usr/src/app
      - /usr/src/app/node_modules
    tty: true
    ports: 
      - "5173:5173"
    command: npm run dev
    depends_on:
      - back-end

  db:
    image: postgres:13  # Using a specific Postgres image
    container_name: postgres-db
    restart: always
    environment: 
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Named volume for persistence
    ports: 
      - "5432:5432"
    networks: 
      - node-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build: 
      context: ./nginx  # Pointing to the nginx directory
    container_name: nginx
    restart: always
    tty: true
    ports: 
      - "8000:80"
    networks: 
      - node-network
    depends_on:
      - front-end
      - back-end
  
networks: 
  node-network:
    driver: bridge

volumes:
  postgres_data:
