version: '3.8'  # Keep the version declaration if using Docker Compose version 1.27.0+

services:
  back-end:
    build:
      context: ./node
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - start
    container_name: back-end
    depends_on:
      - db  # Simply list the service name
    networks:
      - node-network
    ports:
      - "3000:3000"  # Ensure this is a valid port mapping
    tty: true
    volumes:
      - ./node:/usr/src/app
      - /usr/src/app/node_modules
    working_dir: /usr/src/app

  db:
    image: ${DB_IMAGE}  # Use the environment variable defined in .env
    container_name: ${DB_CONTAINER_NAME}  # Use the environment variable defined in .env
    restart: ${DB_RESTART}  # Use the environment variable defined in .env
    environment:
      POSTGRES_USER: ${DB_USER}  # Use the environment variable defined in .env
      POSTGRES_PASSWORD: ${DB_PASSWORD}  # Use the environment variable defined in .env
      POSTGRES_DB: postgres_container
    ports:
      - "${DB_PORT}:5432"  # Use the environment variable defined in .env
    volumes:
      - pgdata:/var/lib/postgresql/data

  front-end:
    build:
      context: ./react
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - dev
    container_name: front-end
    depends_on:
      - back-end  # Simply list the service name
    networks:
      - node-network
    ports:
      - "5173:5173"  # Ensure this is a valid port mapping
    tty: true
    volumes:
      - ./react:/usr/src/app
      - /usr/src/app/node_modules
    working_dir: /usr/src/app

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    depends_on:
      - back-end  # Simply list the service name
      - front-end  # Simply list the service name
    networks:
      - node-network
    ports:
      - "8000:80"  # Ensure this is a valid port mapping
    restart: always
    tty: true

networks:
  node-network:
    driver: bridge

volumes:
  pgdata:  # Named volume for PostgreSQL data storage
